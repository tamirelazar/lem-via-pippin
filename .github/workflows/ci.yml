# .github/workflows/ci.yml

name: Simple CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04  # Fixed Ubuntu version to ensure consistency

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Specify the Python version your project uses

      # 3. Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Copy Sample Configs to Config Directory
      - name: Copy Sample Configs
        run: |
          mkdir -p my_digital_being/config
          cp my_digital_being/config_sample/*.json my_digital_being/config/
      
      # 5. Set Dummy API Keys in Config Files
      - name: Set Dummy API Keys
        run: |
          # Replace API keys in character_config.json with dummy values
          sed -i 's/"COMPOSIO_API_KEY": ".*"/"COMPOSIO_API_KEY": "dummy_key"/' my_digital_being/config/character_config.json
          
          # Replace API keys in skills_config.json with dummy values
          sed -i 's/"LITELLM_API_KEY": ".*"/"LITELLM_API_KEY": "dummy_key"/' my_digital_being/config/skills_config.json
          sed -i 's/"OPENAI_API_KEY": ".*"/"OPENAI_API_KEY": "dummy_key"/' my_digital_being/config/skills_config.json
          sed -i 's/"TWITTER_API_KEY": ".*"/"TWITTER_API_KEY": "dummy_key"/' my_digital_being/config/skills_config.json
          # Add more sed commands as necessary based on your config files

      # 6. Install and Use the 'tree' Command for Debugging
      - name: Install tree
        run: |
          sudo apt-get update
          sudo apt-get install -y tree

      - name: List Directory Structure
        run: |
          echo "Repository structure:"
          tree -L 3

      # 7. Compile Python Files
      - name: Compile Python Files
        run: |
          python -m compileall my_digital_being/

      # 8. Test server.py Initialization with timeout and ignore warnings
      - name: Test server.py Initialization with timeout and ignore warnings
        env:
          COMPOSIO_API_KEY: "dummy_key"  # Dummy key set in config
          PYTHONWARNINGS: "ignore::DeprecationWarning,ignore::UserWarning"
        run: |
          # Run `server.py` in the background and terminate after 10 seconds
          nohup python my_digital_being/server.py &
  
          # Capture the process ID
          SERVER_PID=$!
  
          # Wait for 10 seconds
          sleep 10
  
          # Terminate the server process
          kill $SERVER_PID || true
  
          # Check if the process was terminated successfully
          if ps -p $SERVER_PID > /dev/null; then
            echo "server.py is still running after timeout. Failing the build."
            exit 1
          else
            echo "server.py ran successfully without fatal errors."
          fi
